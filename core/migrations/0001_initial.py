# Generated by Django 5.2.4 on 2025-07-29 10:00

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Display name for the calendar', max_length=255)),
                ('provider', models.CharField(choices=[('google', 'Google Calendar'), ('outlook', 'Microsoft Outlook')], max_length=20)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Feature description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Lead surname', max_length=255, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(help_text="Lead's phone number", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('meta_data', models.JSONField(default=dict, help_text='Custom JSON data for the lead')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phonenumber', models.CharField(help_text='Phone number', max_length=17, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('plan_name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Voice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('voice_external_id', models.CharField(help_text='External voice ID from provider (e.g., ElevenLabs voice ID)', max_length=255)),
                ('provider', models.CharField(help_text="Voice provider (e.g., 'elevenlabs', 'openai', 'google')", max_length=50)),
                ('name', models.CharField(help_text='Voice display name', max_length=100)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('neutral', 'Neutral')], help_text='Voice gender', max_length=20)),
                ('tone', models.CharField(help_text='Voice tone/style', max_length=50)),
                ('recommend', models.BooleanField(default=False, help_text='Recommended voice')),
                ('voice_sample', models.FileField(blank=True, help_text='Voice sample file (.wav or .mp3 format)', null=True, upload_to='voice_samples/')),
                ('voice_picture', models.ImageField(blank=True, help_text='Voice picture file (.png or .jpg format)', null=True, upload_to='voice_pictures/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Email address used for login', max_length=254, unique=True)),
                ('is_email_verified', models.BooleanField(default=False, help_text="Whether the user's email has been verified")),
                ('email_verification_token', models.CharField(blank=True, help_text='Token for email verification', max_length=100, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, help_text='When the verification email was last sent', null=True)),
                ('password_reset_token', models.CharField(blank=True, help_text='Token for password reset', max_length=100, null=True)),
                ('password_reset_sent_at', models.DateTimeField(blank=True, help_text='When the password reset email was last sent', null=True)),
                ('first_name', models.CharField(help_text="User's first name", max_length=150)),
                ('last_name', models.CharField(help_text="User's last name", max_length=150)),
                ('phone', models.CharField(help_text='Phone number in international format', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this user account is active')),
                ('is_staff', models.BooleanField(default=False, help_text='Whether this user can access the admin site')),
                ('stripe_customer_id', models.CharField(blank=True, help_text='Stripe customer ID for billing', max_length=255, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('forever_disabled', 'Forever Disabled')], default='active', help_text='User account status', max_length=20)),
                ('social_id', models.CharField(blank=True, help_text='Social media account ID', max_length=255, null=True)),
                ('social_provider', models.CharField(blank=True, choices=[('google', 'Google'), ('apple', 'Apple'), ('facebook', 'Facebook')], help_text='Social media provider', max_length=20, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='When the user account was created')),
                ('last_login', models.DateTimeField(blank=True, help_text='When the user last logged in', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Blacklist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(help_text='Reason for blacklisting')),
                ('status', models.CharField(choices=[('temporary', 'Temporary'), ('forever', 'Forever'), ('suspended', 'Suspended')], help_text='Blacklist status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_user_blacklist', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalendarConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('duration', models.IntegerField(help_text='Duration of appointments in minutes')),
                ('prep_time', models.IntegerField(help_text='Preparation time in minutes before appointments')),
                ('days_buffer', models.IntegerField(default=0, help_text='Days buffer for scheduling (0 = same day)')),
                ('from_time', models.TimeField(help_text='Start time for scheduling availability')),
                ('to_time', models.TimeField(help_text='End time for scheduling availability')),
                ('workdays', models.JSONField(default=list, help_text="List of working days, e.g., ['monday', 'tuesday', 'wednesday']")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='core.calendar')),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('agent_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Agent name for display', max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused')], default='active', help_text='Agent status', max_length=10)),
                ('greeting_inbound', models.TextField(help_text='Greeting for inbound calls')),
                ('greeting_outbound', models.TextField(help_text='Greeting for outbound calls')),
                ('language', models.CharField(help_text='Agent language', max_length=50)),
                ('retry_interval', models.IntegerField(default=30, help_text='Retry interval in minutes')),
                ('max_retries', models.IntegerField(default=3, help_text='Maximum number of retry attempts for calls')),
                ('workdays', models.JSONField(default=list, help_text="List of working days, e.g., ['monday', 'tuesday', 'wednesday']")),
                ('call_from', models.TimeField(help_text='Start time for calls')),
                ('call_to', models.TimeField(help_text='End time for calls')),
                ('character', models.TextField(help_text='Agent character/personality description')),
                ('prompt', models.TextField(blank=True, help_text='Agent prompt/instructions for AI behavior')),
                ('config_id', models.CharField(blank=True, help_text='Configuration ID for agent settings', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar_configuration', models.ForeignKey(blank=True, help_text='Calendar configuration for this agent', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mapping_config_agents', to='core.calendarconfiguration')),
                ('phone_numbers', models.ManyToManyField(blank=True, related_name='mapping_agent_phonenumbers', to='core.phonenumber')),
                ('voice', models.ForeignKey(blank=True, help_text='Voice configuration for this agent', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mapping_voice_agents', to='core.voice')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleCalendar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_id', models.CharField(help_text='Google Calendar ID', max_length=255, unique=True)),
                ('primary', models.BooleanField(default=False)),
                ('time_zone', models.CharField(max_length=50)),
                ('refresh_token', models.CharField(help_text='Google Calendar API refresh token', max_length=255)),
                ('access_token', models.CharField(help_text='Google Calendar API access token', max_length=255)),
                ('token_expires_at', models.DateTimeField(help_text='When access token expires')),
                ('scopes', models.JSONField(default=list, help_text='Granted OAuth scopes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='google_calendar', to='core.calendar')),
            ],
        ),
        migrations.CreateModel(
            name='CallLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('from_number', models.CharField(help_text="Caller's phone number", max_length=20)),
                ('to_number', models.CharField(help_text="Recipient's phone number", max_length=20)),
                ('duration', models.IntegerField(help_text='Call duration in seconds')),
                ('disconnection_reason', models.CharField(blank=True, help_text='Reason for call disconnection', max_length=255, null=True)),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], help_text='Call direction', max_length=10)),
                ('status', models.CharField(blank=True, choices=[('appointment_scheduled', 'Appointment Scheduled'), ('not_reached', 'Not Reached'), ('no_interest', 'No Interest'), ('reached', 'Reached')], help_text='Call outcome status', max_length=25, null=True)),
                ('appointment_datetime', models.DateTimeField(blank=True, help_text="Scheduled appointment datetime when status is 'terminvereinbart'", null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(help_text='Agent who made/received the call', on_delete=django.db.models.deletion.CASCADE, related_name='mapping_agent_calllogs', to='core.agent')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_lead_calllogs', to='core.lead')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PlanFeature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('limit', models.IntegerField(help_text='Feature limit for this plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.feature')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.plan')),
            ],
            options={
                'unique_together': {('plan', 'feature')},
            },
        ),
        migrations.AddField(
            model_name='plan',
            name='features',
            field=models.ManyToManyField(related_name='mapping_plan_features', through='core.PlanFeature', to='core.feature'),
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('workspace_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('users', models.ManyToManyField(related_name='mapping_user_workspaces', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='calendar',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to='core.workspace'),
        ),
        migrations.AddField(
            model_name='agent',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_workspace_agents', to='core.workspace'),
        ),
        migrations.CreateModel(
            name='GoogleCalendarConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_email', models.EmailField(help_text='Google account email', max_length=254)),
                ('refresh_token', models.TextField(help_text='OAuth refresh token')),
                ('access_token', models.TextField(help_text='OAuth access token')),
                ('token_expires_at', models.DateTimeField(help_text='When access token expires')),
                ('scopes', models.JSONField(default=list, help_text='Granted OAuth scopes')),
                ('active', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='google_calendar_connections', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='google_calendar_connections', to='core.workspace')),
            ],
            options={
                'indexes': [models.Index(fields=['workspace', 'active'], name='core_google_workspa_495422_idx'), models.Index(fields=['token_expires_at'], name='core_google_token_e_4b801e_idx')],
                'unique_together': {('workspace', 'account_email')},
            },
        ),
        migrations.AddIndex(
            model_name='calendar',
            index=models.Index(fields=['workspace', 'provider', 'active'], name='core_calend_workspa_41e667_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendar',
            unique_together={('workspace', 'name', 'provider')},
        ),
    ]

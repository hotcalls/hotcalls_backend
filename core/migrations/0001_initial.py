# Generated by Django 5.2.4 on 2025-08-22 14:59

import core.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="",
                        help_text="Display name for the calendar",
                        max_length=255,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("google", "Google Calendar"),
                            ("outlook", "Microsoft Outlook"),
                        ],
                        default="google",
                        max_length=20,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("feature_name", models.CharField(max_length=100, unique=True)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Feature description"),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("minute", "Minute"),
                            ("general_unit", "General Unit"),
                            ("access", "Access"),
                            ("request", "Request"),
                            ("gb", "Gigabyte"),
                        ],
                        help_text="Unit type for this feature",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Lead",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "surname",
                    models.CharField(
                        blank=True, help_text="Lead surname", max_length=255, null=True
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone",
                    models.CharField(help_text="Lead's phone number", max_length=50),
                ),
                (
                    "integration_provider",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("meta", "Meta (Facebook/Instagram)"),
                            ("google", "Google"),
                            ("manual", "Manual Entry"),
                            ("custom-webhook", "Custom Webhook"),
                        ],
                        help_text="Integration provider source",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "variables",
                    models.JSONField(
                        default=dict,
                        help_text="Concrete lead variables from integration",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "meta_data",
                    models.JSONField(
                        default=dict, help_text="Custom JSON data for the lead"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="LeadFunnel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this lead funnel", max_length=255
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this funnel should process incoming leads",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MetaIntegration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "business_account_id",
                    models.CharField(
                        help_text="Meta Business Account ID", max_length=255
                    ),
                ),
                (
                    "page_id",
                    models.CharField(
                        help_text="Facebook/Instagram Page ID", max_length=255
                    ),
                ),
                (
                    "page_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Meta Page Name",
                        max_length=500,
                    ),
                ),
                (
                    "page_picture_url",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="Meta Page Profile Picture URL",
                        max_length=1000,
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        editable=False,
                        help_text="Meta API access token (encrypted at rest)",
                    ),
                ),
                (
                    "access_token_expires_at",
                    models.DateTimeField(help_text="When the access token expires"),
                ),
                (
                    "verification_token",
                    models.CharField(
                        editable=False,
                        help_text="Webhook verification token for Meta (encrypted at rest)",
                        max_length=255,
                    ),
                ),
                (
                    "scopes",
                    models.JSONField(default=list, help_text="Granted Meta API scopes"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("revoked", "Revoked"),
                            ("error", "Error"),
                            ("disconnected", "Disconnected"),
                        ],
                        default="active",
                        help_text="Integration status",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "phonenumber",
                    models.CharField(
                        help_text="Phone number in E.164 format",
                        max_length=17,
                        unique=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this phone number is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Plan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("plan_name", models.CharField(max_length=100, unique=True)),
                (
                    "stripe_product_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Product ID (prod_xxx)",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "stripe_price_id_monthly",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Price ID for monthly billing (price_xxx)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_price_id_yearly",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Price ID for yearly billing (price_xxx)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "price_monthly",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Monthly price in EUR",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "price_yearly",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Yearly price in EUR",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Is this plan available for new subscriptions?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SIPTrunk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "provider_name",
                    models.CharField(
                        help_text="SIP provider name (e.g., 'Twilio', 'Sipgate')",
                        max_length=100,
                    ),
                ),
                (
                    "sip_username",
                    models.CharField(
                        help_text="SIP authentication username", max_length=255
                    ),
                ),
                (
                    "sip_password",
                    models.CharField(
                        help_text="SIP authentication password (encrypted at rest)",
                        max_length=255,
                    ),
                ),
                (
                    "sip_host",
                    models.CharField(
                        help_text="SIP server domain/IP address", max_length=255
                    ),
                ),
                (
                    "sip_port",
                    models.IntegerField(default=5060, help_text="SIP server port"),
                ),
                (
                    "jambonz_carrier_id",
                    models.CharField(
                        blank=True,
                        help_text="Jambonz carrier ID for this trunk",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "livekit_trunk_id",
                    models.CharField(
                        blank=True,
                        help_text="LiveKit trunk ID for this provider",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this SIP trunk is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Voice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "voice_external_id",
                    models.CharField(
                        help_text="External voice ID from provider (e.g., ElevenLabs voice ID)",
                        max_length=255,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        help_text="Voice provider (e.g., 'elevenlabs', 'openai', 'google')",
                        max_length=50,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Voice display name", max_length=100),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("neutral", "Neutral"),
                        ],
                        help_text="Voice gender",
                        max_length=20,
                    ),
                ),
                ("tone", models.CharField(help_text="Voice tone/style", max_length=50)),
                (
                    "recommend",
                    models.BooleanField(default=False, help_text="Recommended voice"),
                ),
                (
                    "voice_sample",
                    models.FileField(
                        blank=True,
                        help_text="Voice sample file (.wav or .mp3 format)",
                        null=True,
                        upload_to="voice_samples/",
                    ),
                ),
                (
                    "voice_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Voice picture file (.png or .jpg format)",
                        null=True,
                        upload_to="voice_pictures/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address used for login",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user's email has been verified",
                    ),
                ),
                (
                    "email_verification_token",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Token for email verification (encrypted at rest)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "email_verification_sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the verification email was last sent",
                        null=True,
                    ),
                ),
                (
                    "password_reset_token",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Token for password reset (encrypted at rest)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "password_reset_sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the password reset email was last sent",
                        null=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="User's first name", max_length=150),
                ),
                (
                    "last_name",
                    models.CharField(help_text="User's last name", max_length=150),
                ),
                (
                    "phone",
                    models.CharField(
                        help_text="Phone number in international format", max_length=50
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this user account is active"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this user can access the admin site",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe customer ID for billing",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("forever_disabled", "Forever Disabled"),
                        ],
                        default="active",
                        help_text="User account status",
                        max_length=20,
                    ),
                ),
                (
                    "social_id",
                    models.CharField(
                        blank=True,
                        help_text="Social media account ID",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "social_provider",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("google", "Google"),
                            ("apple", "Apple"),
                            ("facebook", "Facebook"),
                        ],
                        help_text="Social media provider",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the user account was created",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, help_text="When the user last logged in", null=True
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="Blacklist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("reason", models.TextField(help_text="Reason for blacklisting")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("temporary", "Temporary"),
                            ("forever", "Forever"),
                            ("suspended", "Suspended"),
                        ],
                        help_text="Blacklist status",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapping_user_blacklist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalendarConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name/title for this calendar configuration",
                        max_length=255,
                    ),
                ),
                (
                    "meeting_type",
                    models.CharField(
                        choices=[
                            ("online", "Online Meeting"),
                            ("in_person", "In Person"),
                            ("phone", "Phone Call"),
                        ],
                        default="online",
                        help_text="Type of meeting",
                        max_length=20,
                    ),
                ),
                (
                    "meeting_link",
                    models.URLField(
                        blank=True,
                        help_text="Meeting link for online meetings (optional)",
                        null=True,
                    ),
                ),
                (
                    "meeting_address",
                    models.TextField(
                        blank=True,
                        help_text="Meeting address for in-person meetings (optional)",
                        null=True,
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        help_text="Duration of appointments in minutes"
                    ),
                ),
                (
                    "prep_time",
                    models.IntegerField(
                        help_text="Preparation time in minutes before appointments"
                    ),
                ),
                (
                    "days_buffer",
                    models.IntegerField(
                        default=0, help_text="Days buffer for scheduling (0 = same day)"
                    ),
                ),
                (
                    "from_time",
                    models.TimeField(
                        help_text="Start time for scheduling availability"
                    ),
                ),
                (
                    "to_time",
                    models.TimeField(help_text="End time for scheduling availability"),
                ),
                (
                    "workdays",
                    models.JSONField(
                        default=list,
                        help_text="List of working days, e.g., ['monday', 'tuesday', 'wednesday']",
                    ),
                ),
                (
                    "conflict_check_calendars",
                    models.JSONField(
                        default=list,
                        help_text="List of calendar IDs to check for scheduling conflicts",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calendar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configurations",
                        to="core.calendar",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "agent_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Agent name for display", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("paused", "Paused")],
                        default="active",
                        help_text="Agent status",
                        max_length=10,
                    ),
                ),
                (
                    "greeting_inbound",
                    models.TextField(
                        blank=True,
                        default="Hello! How can I help you today?",
                        help_text="Greeting for inbound calls",
                    ),
                ),
                (
                    "greeting_outbound",
                    models.TextField(
                        blank=True,
                        default="Hello! I'm calling from our team. Is this a good time to talk?",
                        help_text="Greeting for outbound calls",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", help_text="Agent language", max_length=50
                    ),
                ),
                (
                    "retry_interval",
                    models.IntegerField(
                        default=30, help_text="Retry interval in minutes"
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(
                        default=3,
                        help_text="Maximum number of retry attempts for calls",
                    ),
                ),
                (
                    "max_call_duration_minutes",
                    models.IntegerField(
                        default=30,
                        help_text="Maximum allowed call duration (minutes) before auto-cleanup of stuck IN_PROGRESS tasks",
                    ),
                ),
                (
                    "workdays",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of working days, e.g., ['monday', 'tuesday', 'wednesday']",
                    ),
                ),
                (
                    "call_from",
                    models.TimeField(
                        default="09:00:00", help_text="Start time for calls"
                    ),
                ),
                (
                    "call_to",
                    models.TimeField(
                        default="17:00:00", help_text="End time for calls"
                    ),
                ),
                (
                    "character",
                    models.TextField(
                        blank=True,
                        default="I am a helpful and professional AI assistant.",
                        help_text="Agent character/personality description",
                    ),
                ),
                (
                    "prompt",
                    models.TextField(
                        blank=True,
                        help_text="Agent prompt/instructions for AI behavior",
                    ),
                ),
                (
                    "kb_pdf",
                    models.FileField(
                        blank=True,
                        help_text="Single Knowledge Base PDF for this agent",
                        null=True,
                        upload_to=core.models.agent_kb_upload_path,
                    ),
                ),
                (
                    "send_document",
                    models.FileField(
                        blank=True,
                        help_text="Single PDF that the agent can send via email",
                        null=True,
                        upload_to=core.models.agent_send_document_upload_path,
                    ),
                ),
                (
                    "email_default_subject",
                    models.CharField(
                        blank=True,
                        help_text="Default subject when sending the document via email",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "email_default_body",
                    models.TextField(
                        blank=True,
                        help_text="Default body when sending the document via email",
                        null=True,
                    ),
                ),
                (
                    "config_id",
                    models.CharField(
                        blank=True,
                        help_text="Configuration ID for agent settings",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calendar_configuration",
                    models.ForeignKey(
                        blank=True,
                        help_text="Calendar configuration for this agent",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mapping_config_agents",
                        to="core.calendarconfiguration",
                    ),
                ),
                (
                    "lead_funnel",
                    models.OneToOneField(
                        blank=True,
                        help_text="Lead funnel this agent handles",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agent",
                        to="core.leadfunnel",
                    ),
                ),
                (
                    "phone_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="Phone number assigned to this agent (agent accesses SIP trunk via agent.phone_number.sip_trunk)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="agents",
                        to="core.phonenumber",
                    ),
                ),
                (
                    "voice",
                    models.ForeignKey(
                        blank=True,
                        help_text="Voice configuration for this agent",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="agents",
                        to="core.voice",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoogleCalendarConnection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "account_email",
                    models.EmailField(help_text="Google account email", max_length=254),
                ),
                (
                    "refresh_token",
                    models.TextField(
                        editable=False,
                        help_text="OAuth refresh token (encrypted at rest)",
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        editable=False,
                        help_text="OAuth access token (encrypted at rest)",
                    ),
                ),
                (
                    "token_expires_at",
                    models.DateTimeField(help_text="When access token expires"),
                ),
                (
                    "scopes",
                    models.JSONField(default=list, help_text="Granted OAuth scopes"),
                ),
                ("active", models.BooleanField(default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("sync_errors", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="google_calendar_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoogleCalendar",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        help_text="Google Calendar ID", max_length=255, unique=True
                    ),
                ),
                ("primary", models.BooleanField(default=False)),
                ("time_zone", models.CharField(max_length=50)),
                (
                    "access_role",
                    models.CharField(
                        choices=[
                            ("freeBusyReader", "Free/Busy Reader"),
                            ("reader", "Reader"),
                            ("writer", "Writer"),
                            ("owner", "Owner"),
                        ],
                        default="reader",
                        help_text="Access level for this calendar",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calendar",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="google_calendar",
                        to="core.calendar",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        blank=True,
                        help_text="OAuth connection that provides access to this calendar",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendars",
                        to="core.googlecalendarconnection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CallLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "call_task_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="ID of originating CallTask (not a foreign key, may be dangling)",
                    ),
                ),
                (
                    "target_ref",
                    models.CharField(
                        blank=True,
                        help_text="Canonical call target reference from CallTask",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "event_id",
                    models.UUIDField(
                        blank=True,
                        db_index=True,
                        help_text="Idempotency key for a single call attempt (one CallLog per event_id)",
                        null=True,
                        unique=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "from_number",
                    models.CharField(help_text="Caller's phone number", max_length=20),
                ),
                (
                    "to_number",
                    models.CharField(
                        help_text="Recipient's phone number", max_length=20
                    ),
                ),
                ("duration", models.IntegerField(help_text="Call duration in seconds")),
                (
                    "disconnection_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("user_hangup", "User Hangup"),
                            ("agent_hangup", "Agent Hangup"),
                            ("call_transfer", "Call Transfer"),
                            ("voicemail_reached", "Voicemail Reached"),
                            ("inactivity", "Inactivity Timeout"),
                            ("max_duration_reached", "Maximum Duration Reached"),
                            ("dial_busy", "Dial Busy"),
                            ("dial_failed", "Dial Failed"),
                            ("dial_no_answer", "No Answer"),
                            ("invalid_destination", "Invalid Destination"),
                            (
                                "telephony_provider_permission_denied",
                                "Telephony Provider Permission Denied",
                            ),
                            (
                                "telephony_provider_unavailable",
                                "Telephony Provider Unavailable",
                            ),
                            ("sip_routing_error", "SIP Routing Error"),
                            ("marked_as_spam", "Marked as Spam"),
                            ("user_declined", "User Declined"),
                            ("concurrency_limit_reached", "Concurrency Limit Reached"),
                            ("no_valid_payment", "No Valid Payment"),
                            ("scam_detected", "Scam Detected"),
                            ("error_llm_websocket_open", "LLM Websocket Open Error"),
                            (
                                "error_llm_websocket_lost_connection",
                                "LLM Websocket Lost Connection",
                            ),
                            (
                                "error_llm_websocket_runtime",
                                "LLM Websocket Runtime Error",
                            ),
                            (
                                "error_llm_websocket_corrupt_payload",
                                "LLM Websocket Corrupt Payload",
                            ),
                            ("error_no_audio_received", "No Audio Received"),
                            ("error_asr", "ASR Error"),
                            ("error_hotcalls", "HotCalls Error"),
                            ("error_unknown", "Unknown Error"),
                            ("error_user_not_joined", "User Not Joined"),
                            ("registered_call_timeout", "Registered Call Timeout"),
                            ("preflight_call_log_failed", "Preflight Call Log Failed"),
                        ],
                        help_text="Reason for call disconnection",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("inbound", "Inbound"), ("outbound", "Outbound")],
                        help_text="Call direction",
                        max_length=10,
                    ),
                ),
                (
                    "appointment_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Scheduled appointment datetime when status is 'appointment_scheduled'",
                        null=True,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="Agent who made/received the call",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapping_agent_calllogs",
                        to="core.agent",
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapping_lead_calllogs",
                        to="core.lead",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddField(
            model_name="lead",
            name="lead_funnel",
            field=models.ForeignKey(
                blank=True,
                help_text="Source funnel this lead came from",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="leads",
                to="core.leadfunnel",
            ),
        ),
        migrations.CreateModel(
            name="MetaLeadForm",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "meta_form_id",
                    models.CharField(help_text="Meta Lead Form ID", max_length=255),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Meta Lead Form Name/Title",
                        max_length=500,
                    ),
                ),
                (
                    "meta_lead_id",
                    models.CharField(
                        blank=True,
                        help_text="Meta Lead ID (for tracking specific leads)",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "meta_integration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lead_forms",
                        to="core.metaintegration",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="leadfunnel",
            name="meta_lead_form",
            field=models.OneToOneField(
                blank=True,
                help_text="Meta lead form connected to this funnel",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lead_funnel",
                to="core.metaleadform",
            ),
        ),
        migrations.CreateModel(
            name="MicrosoftCalendarConnection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "primary_email",
                    models.EmailField(
                        help_text="Primary UPN/email of the Microsoft account",
                        max_length=254,
                    ),
                ),
                (
                    "tenant_id",
                    models.CharField(
                        help_text="Azure AD Tenant ID (tid)", max_length=128
                    ),
                ),
                (
                    "ms_user_id",
                    models.CharField(
                        help_text="Microsoft user object ID (oid)", max_length=128
                    ),
                ),
                (
                    "display_name",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                (
                    "timezone_windows",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Windows time zone id (e.g., 'W. Europe Standard Time')",
                        max_length=100,
                    ),
                ),
                (
                    "refresh_token",
                    models.TextField(
                        editable=False,
                        help_text="OAuth refresh token (encrypted at rest)",
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        editable=False,
                        help_text="OAuth access token (encrypted at rest)",
                    ),
                ),
                (
                    "token_expires_at",
                    models.DateTimeField(help_text="When access token expires"),
                ),
                (
                    "scopes_granted",
                    models.JSONField(default=list, help_text="Granted OAuth scopes"),
                ),
                ("active", models.BooleanField(default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("sync_errors", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="microsoft_calendar_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MicrosoftCalendar",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        help_text="Microsoft Calendar ID", max_length=255, unique=True
                    ),
                ),
                ("primary", models.BooleanField(default=False)),
                (
                    "can_edit",
                    models.BooleanField(
                        default=True,
                        help_text="Whether current user can edit this calendar",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calendar",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="microsoft_calendar",
                        to="core.calendar",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        blank=True,
                        help_text="OAuth connection that provides access to this calendar",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendars",
                        to="core.microsoftcalendarconnection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MicrosoftSubscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("subscription_id", models.CharField(max_length=255, unique=True)),
                ("resource", models.CharField(default="me/events", max_length=255)),
                (
                    "client_state",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                ("expiration_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="core.microsoftcalendarconnection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlanFeature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "limit",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Feature limit for this plan",
                        max_digits=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.feature"
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.plan"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="plan",
            name="features",
            field=models.ManyToManyField(
                related_name="mapping_plan_features",
                through="core.PlanFeature",
                to="core.feature",
            ),
        ),
        migrations.AddField(
            model_name="phonenumber",
            name="sip_trunk",
            field=models.OneToOneField(
                blank=True,
                help_text="SIP trunk associated with this phone number",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="phone_number",
                to="core.siptrunk",
            ),
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("workspace_name", models.CharField(max_length=255)),
                (
                    "has_used_trial",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this workspace has used their trial period",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Customer ID for billing",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_subscription_id",
                    models.CharField(
                        blank=True,
                        help_text="Current Stripe Subscription ID (sub_xxx)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "subscription_status",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("active", "Active"),
                            ("past_due", "Past Due"),
                            ("unpaid", "Unpaid"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="none",
                        help_text="Current subscription status (mirrors Stripe status)",
                        max_length=20,
                    ),
                ),
                (
                    "smtp_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable outbound email via this workspace SMTP configuration",
                    ),
                ),
                (
                    "smtp_host",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="SMTP hostname",
                        max_length=255,
                    ),
                ),
                ("smtp_port", models.IntegerField(default=587, help_text="SMTP port")),
                (
                    "smtp_use_tls",
                    models.BooleanField(default=True, help_text="Use STARTTLS"),
                ),
                (
                    "smtp_use_ssl",
                    models.BooleanField(
                        default=False, help_text="Use implicit SSL/TLS"
                    ),
                ),
                (
                    "smtp_username",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="SMTP username",
                        max_length=255,
                    ),
                ),
                (
                    "smtp_password_encrypted",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="SMTP password (encrypted at rest)",
                    ),
                ),
                (
                    "smtp_from_email",
                    models.EmailField(
                        blank=True,
                        default="",
                        help_text="Sender email address for outbound messages",
                        max_length=254,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "admin_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="admin_workspaces",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_workspaces",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "current_plan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current subscription plan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workspaces",
                        to="core.plan",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="mapping_user_workspaces",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebhookLeadSource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this webhook source", max_length=255
                    ),
                ),
                (
                    "public_key",
                    models.CharField(
                        db_index=True,
                        help_text="Public identifier used in the inbound webhook URL",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Bearer token required in Authorization header",
                        max_length=128,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lead_funnel",
                    models.OneToOneField(
                        help_text="Lead funnel connected to this webhook source",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webhook_source",
                        to="core.leadfunnel",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webhook_lead_sources",
                        to="core.workspace",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="microsoftcalendarconnection",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="microsoft_calendar_connections",
                to="core.workspace",
            ),
        ),
        migrations.AddField(
            model_name="metaintegration",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="meta_integrations",
                to="core.workspace",
            ),
        ),
        migrations.CreateModel(
            name="LeadProcessingStats",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        auto_now_add=True, help_text="Date of the statistics"
                    ),
                ),
                (
                    "total_received",
                    models.IntegerField(
                        default=0, help_text="Total leads received from webhooks"
                    ),
                ),
                (
                    "processed_with_agent",
                    models.IntegerField(
                        default=0, help_text="Leads processed with active agent"
                    ),
                ),
                (
                    "ignored_no_funnel",
                    models.IntegerField(
                        default=0, help_text="Leads ignored - no funnel configured"
                    ),
                ),
                (
                    "ignored_no_agent",
                    models.IntegerField(
                        default=0, help_text="Leads ignored - no agent assigned"
                    ),
                ),
                (
                    "ignored_inactive_agent",
                    models.IntegerField(
                        default=0, help_text="Leads ignored - agent inactive"
                    ),
                ),
                (
                    "ignored_inactive_funnel",
                    models.IntegerField(
                        default=0, help_text="Leads ignored - funnel inactive"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lead_processing_stats",
                        to="core.workspace",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.AddField(
            model_name="leadfunnel",
            name="workspace",
            field=models.ForeignKey(
                help_text="Workspace this funnel belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lead_funnels",
                to="core.workspace",
            ),
        ),
        migrations.AddField(
            model_name="lead",
            name="workspace",
            field=models.ForeignKey(
                blank=True,
                help_text="Workspace this lead belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="leads",
                to="core.workspace",
            ),
        ),
        migrations.AddField(
            model_name="googlecalendarconnection",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="google_calendar_connections",
                to="core.workspace",
            ),
        ),
        migrations.CreateModel(
            name="CallTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "scheduled"),
                            ("call_triggered", "call_triggered"),
                            ("in_progress", "in_progress"),
                            ("retry", "retry"),
                            ("waiting", "waiting"),
                        ],
                        default="scheduled",
                        help_text="Current status of the call task",
                        max_length=20,
                    ),
                ),
                (
                    "attempts",
                    models.IntegerField(
                        default=0, help_text="Number of retry attempts made"
                    ),
                ),
                (
                    "phone",
                    models.CharField(help_text="Phone number to call", max_length=20),
                ),
                (
                    "target_ref",
                    models.CharField(
                        blank=True,
                        help_text="Canonical call target reference (e.g., 'lead:<uuid>', 'test_user:<uuid>', 'raw_phone:+49123')",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "next_call",
                    models.DateTimeField(
                        help_text="Scheduled time for the next call attempt"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "retry_reasons",
                    models.JSONField(
                        default=list,
                        help_text="Append-only list of retry reason dicts: {reason, hint, at}",
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="Agent assigned to handle this call task",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="call_tasks",
                        to="core.agent",
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        help_text="Lead associated with this call task (null for test calls)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="call_tasks",
                        to="core.lead",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        help_text="Workspace associated with this call task",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="call_tasks",
                        to="core.workspace",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="calendar",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="calendars",
                to="core.workspace",
            ),
        ),
        migrations.AddField(
            model_name="agent",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="mapping_workspace_agents",
                to="core.workspace",
            ),
        ),
        migrations.CreateModel(
            name="WorkspaceInvitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the person being invited",
                        max_length=254,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        editable=False,
                        help_text="Secure token for invitation acceptance (encrypted at rest)",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the invitation",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When this invitation expires (7 days from creation)"
                    ),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was accepted",
                        null=True,
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        help_text="User who sent the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        help_text="Workspace the user is being invited to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="core.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorkspaceSubscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField()),
                ("ends_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.plan"
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.workspace"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorkspaceUsage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                (
                    "extra_call_minutes",
                    models.DecimalField(
                        decimal_places=3,
                        default=0,
                        help_text="Extra purchased call minutes credited to this billing period",
                        max_digits=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "subscription",
                    models.ForeignKey(
                        help_text="Subscription that was active for this usage period",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.workspacesubscription",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.workspace"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeatureUsage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "used_amount",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.feature"
                    ),
                ),
                (
                    "usage_record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_usages",
                        to="core.workspaceusage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EndpointFeature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "route_name",
                    models.CharField(
                        db_index=True,
                        help_text="Django route name or regex pattern for the endpoint",
                        max_length=200,
                    ),
                ),
                (
                    "http_method",
                    models.CharField(
                        choices=[
                            ("GET", "GET"),
                            ("POST", "POST"),
                            ("PUT", "PUT"),
                            ("PATCH", "PATCH"),
                            ("DELETE", "DELETE"),
                            ("HEAD", "HEAD"),
                            ("OPTIONS", "OPTIONS"),
                            ("*", "Any Method"),
                        ],
                        default="*",
                        help_text="HTTP method (GET, POST, etc.) or '*' for any method",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feature",
                    models.ForeignKey(
                        help_text="Feature that governs this endpoint",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoint_features",
                        to="core.feature",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["route_name"], name="core_endpoi_route_n_dc682a_idx"
                    ),
                    models.Index(
                        fields=["route_name", "http_method"],
                        name="core_endpoi_route_n_81ab13_idx",
                    ),
                ],
                "unique_together": {("route_name", "http_method")},
            },
        ),
        migrations.AddIndex(
            model_name="metaleadform",
            index=models.Index(
                fields=["meta_integration", "meta_form_id"],
                name="core_metale_meta_in_2e809e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="metaleadform",
            index=models.Index(
                fields=["meta_lead_id"], name="core_metale_meta_le_7c8b91_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="metaleadform",
            unique_together={("meta_integration", "meta_form_id")},
        ),
        migrations.AddIndex(
            model_name="microsoftsubscription",
            index=models.Index(
                fields=["connection"], name="core_micros_connect_18b10e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="microsoftsubscription",
            index=models.Index(
                fields=["expiration_at"], name="core_micros_expirat_70a406_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="planfeature",
            unique_together={("plan", "feature")},
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.UniqueConstraint(
                condition=models.Q(("stripe_customer_id__isnull", False)),
                fields=("stripe_customer_id",),
                name="unique_stripe_customer_id",
            ),
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.UniqueConstraint(
                condition=models.Q(("stripe_subscription_id__isnull", False)),
                fields=("stripe_subscription_id",),
                name="unique_stripe_subscription_id",
            ),
        ),
        migrations.AddIndex(
            model_name="webhookleadsource",
            index=models.Index(
                fields=["public_key"], name="core_webhoo_public__941b75_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="microsoftcalendarconnection",
            index=models.Index(
                fields=["workspace", "active"], name="core_micros_workspa_db53b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="microsoftcalendarconnection",
            index=models.Index(
                fields=["token_expires_at"], name="core_micros_token_e_843008_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="microsoftcalendarconnection",
            unique_together={("workspace", "primary_email")},
        ),
        migrations.AddIndex(
            model_name="metaintegration",
            index=models.Index(
                fields=["workspace", "status"], name="core_metain_workspa_a4fab8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="metaintegration",
            index=models.Index(
                fields=["access_token_expires_at"],
                name="core_metain_access__ad18f5_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="metaintegration",
            unique_together={("workspace", "business_account_id", "page_id")},
        ),
        migrations.AddIndex(
            model_name="leadprocessingstats",
            index=models.Index(
                fields=["workspace", "date"], name="core_leadpr_workspa_eefb3c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leadprocessingstats",
            index=models.Index(fields=["date"], name="core_leadpr_date_7886a3_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="leadprocessingstats",
            unique_together={("workspace", "date")},
        ),
        migrations.AddIndex(
            model_name="leadfunnel",
            index=models.Index(
                fields=["workspace", "is_active"], name="core_leadfu_workspa_599ef0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leadfunnel",
            index=models.Index(
                fields=["workspace"], name="core_leadfu_workspa_92cab2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leadfunnel",
            index=models.Index(
                fields=["is_active"], name="core_leadfu_is_acti_e3f518_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="googlecalendarconnection",
            index=models.Index(
                fields=["workspace", "active"], name="core_google_workspa_495422_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="googlecalendarconnection",
            index=models.Index(
                fields=["token_expires_at"], name="core_google_token_e_4b801e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="googlecalendarconnection",
            unique_together={("workspace", "account_email")},
        ),
        migrations.AddIndex(
            model_name="calltask",
            index=models.Index(
                fields=["status", "next_call"], name="core_callta_status_b92001_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calltask",
            index=models.Index(
                fields=["agent", "status"], name="core_callta_agent_i_6570d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calltask",
            index=models.Index(
                fields=["next_call"], name="core_callta_next_ca_d8b39f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calendar",
            index=models.Index(
                fields=["workspace", "provider", "active"],
                name="core_calend_workspa_41e667_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="calendar",
            unique_together={("workspace", "name", "provider")},
        ),
        migrations.AddIndex(
            model_name="workspaceinvitation",
            index=models.Index(fields=["token"], name="core_worksp_token_126ea6_idx"),
        ),
        migrations.AddIndex(
            model_name="workspaceinvitation",
            index=models.Index(
                fields=["email", "status"], name="core_worksp_email_538d7a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workspaceinvitation",
            index=models.Index(
                fields=["workspace", "status"], name="core_worksp_workspa_63175a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workspaceinvitation",
            index=models.Index(
                fields=["expires_at"], name="core_worksp_expires_5b24a3_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="workspaceinvitation",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "pending")),
                fields=("workspace", "email"),
                name="unique_pending_invitation_per_workspace_email",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="workspaceinvitation",
            unique_together={("workspace", "email", "status")},
        ),
        migrations.AddConstraint(
            model_name="workspacesubscription",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("workspace",),
                name="unique_active_subscription_per_workspace",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="workspaceusage",
            unique_together={("workspace", "period_start", "period_end")},
        ),
        migrations.AlterUniqueTogether(
            name="featureusage",
            unique_together={("usage_record", "feature")},
        ),
    ]

# Generated by Django 5.2.4 on 2025-07-30 22:23

from django.db import migrations
from decimal import Decimal


def backfill_endpoint_features(apps, schema_editor):
    """Backfill EndpointFeature records with NULL http_method to use '*'"""
    EndpointFeature = apps.get_model('core', 'EndpointFeature')
    
    # Update all NULL http_method values to '*'
    updated_count = EndpointFeature.objects.filter(
        http_method__isnull=True
    ).update(http_method='*')
    
    print(f"Updated {updated_count} EndpointFeature records: NULL -> '*'")


def reverse_endpoint_features(apps, schema_editor):
    """Reverse: change '*' back to NULL for EndpointFeature records"""
    EndpointFeature = apps.get_model('core', 'EndpointFeature')
    
    # Revert '*' back to NULL (for rollback scenarios)
    updated_count = EndpointFeature.objects.filter(
        http_method='*'
    ).update(http_method=None)
    
    print(f"Reverted {updated_count} EndpointFeature records: '*' -> NULL")


def check_lead_workspace_nulls(apps, schema_editor):
    """Check for Lead records with NULL workspace and report"""
    # Skip this check for now since Lead.workspace field may not exist in current database
    print("⏭️ Skipping Lead.workspace check - will be handled in future migration if needed")


def convert_planfeature_limits(apps, schema_editor):
    """Ensure PlanFeature limits are properly formatted as decimals"""
    PlanFeature = apps.get_model('core', 'PlanFeature')
    
    try:
        # Get all PlanFeature records and ensure limits are decimal format
        processed_count = 0
        for plan_feature in PlanFeature.objects.all():
            # Convert to Decimal to ensure proper format
            if plan_feature.limit is not None:
                plan_feature.limit = Decimal(str(plan_feature.limit))
                plan_feature.save(update_fields=['limit'])
                processed_count += 1
        
        total_count = PlanFeature.objects.count()
        print(f"✅ Processed {processed_count}/{total_count} PlanFeature limit values for decimal format")
    except Exception as e:
        print(f"⚠️ Could not process PlanFeature limits: {e}")
        print("This might be expected if PlanFeature table doesn't exist yet")


def reverse_planfeature_limits(apps, schema_editor):
    """Reverse operation (no-op since conversion is compatible)"""
    print("PlanFeature limit conversion reverse: no action needed (compatible format)")


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0011_add_stripe_uniqueness_constraints"),
    ]

    operations = [
        migrations.RunPython(
            backfill_endpoint_features,
            reverse_endpoint_features,
            elidable=True,
        ),
        migrations.RunPython(
            check_lead_workspace_nulls,
            migrations.RunPython.noop,
            elidable=True,
        ),
        migrations.RunPython(
            convert_planfeature_limits,
            reverse_planfeature_limits,
            elidable=True,
        ),
    ]

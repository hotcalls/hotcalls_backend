# Generated by Django 4.2.17 on 2025-08-31 04:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="eventtype",
            name="buffer_after_minutes",
            field=models.PositiveIntegerField(
                default=0,
                help_text="Buffer time in MINUTES to leave after each booking",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="max_booking_days_ahead",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Maximum days ahead bookings are allowed (null = unlimited)",
                null=True,
                validators=[django.core.validators.MinValueValidator(1)],
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="min_notice_minutes",
            field=models.PositiveIntegerField(
                default=0,
                help_text="Minimum notice required before a slot can start (in minutes)",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AddField(
            model_name="eventtype",
            name="slot_interval_minutes",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Slot start interval in MINUTES (default: equals duration)",
                null=True,
                validators=[django.core.validators.MinValueValidator(1)],
            ),
        ),
        migrations.CreateModel(
            name="EventTypeException",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_available", models.BooleanField(default=False)),
                ("start_datetime", models.DateTimeField()),
                ("end_datetime", models.DateTimeField()),
                ("reason", models.CharField(blank=True, default="", max_length=255)),
                (
                    "event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exceptions",
                        to="core.eventtype",
                    ),
                ),
            ],
            options={
                "db_table": "event_type_exception",
            },
        ),
        migrations.CreateModel(
            name="EventBooking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "invitee_name",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                ("invitee_email", models.EmailField(max_length=254)),
                ("status", models.CharField(default="confirmed", max_length=20)),
                (
                    "provider_events",
                    models.JSONField(
                        default=list,
                        help_text="List of provider events with ids and sub_account mapping",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="core.eventtype",
                    ),
                ),
            ],
            options={
                "db_table": "event_booking",
            },
        ),
        migrations.AddConstraint(
            model_name="eventtypeexception",
            constraint=models.CheckConstraint(
                check=models.Q(("end_datetime__gt", models.F("start_datetime"))),
                name="chk_eventtype_exception_start_before_end",
            ),
        ),
        migrations.AddIndex(
            model_name="eventbooking",
            index=models.Index(
                fields=["event_type", "start_time"],
                name="event_booki_event_t_a62eb3_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventbooking",
            constraint=models.UniqueConstraint(
                fields=("event_type", "start_time"),
                name="uq_event_single_start_per_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventbooking",
            constraint=models.CheckConstraint(
                check=models.Q(("end_time__gt", models.F("start_time"))),
                name="chk_booking_start_before_end",
            ),
        ),
    ]

# Generated by Django 4.2.17 on 2025-08-26 07:51

from django.db import migrations


def create_self_subaccounts(apps, schema_editor):
    """
    Create 'self' sub-accounts for all existing GoogleCalendar and OutlookCalendar entries.
    This ensures backward compatibility - existing calendars will have a sub-account 
    representing the main account holder.
    """
    GoogleCalendar = apps.get_model('core', 'GoogleCalendar')
    GoogleSubAccount = apps.get_model('core', 'GoogleSubAccount')
    OutlookCalendar = apps.get_model('core', 'OutlookCalendar')
    OutlookSubAccount = apps.get_model('core', 'OutlookSubAccount')
    
    # Create self sub-accounts for Google Calendars
    for google_cal in GoogleCalendar.objects.all():
        GoogleSubAccount.objects.get_or_create(
            google_calendar=google_cal,
            act_as_email=google_cal.account_email,
            defaults={
                'act_as_user_id': '',  # Will be populated on next sync
                'relationship': 'self',
                'active': True
            }
        )
        print(f"Created self sub-account for Google Calendar: {google_cal.account_email}")
    
    # Create self sub-accounts for Outlook Calendars  
    for outlook_cal in OutlookCalendar.objects.all():
        OutlookSubAccount.objects.get_or_create(
            outlook_calendar=outlook_cal,
            act_as_upn=outlook_cal.primary_email,
            defaults={
                'mailbox_object_id': outlook_cal.ms_user_id,  # We have this from the main account
                'relationship': 'self',
                'active': True
            }
        )
        print(f"Created self sub-account for Outlook Calendar: {outlook_cal.primary_email}")


def reverse_self_subaccounts(apps, schema_editor):
    """
    Remove all 'self' sub-accounts (reverse migration).
    """
    GoogleSubAccount = apps.get_model('core', 'GoogleSubAccount')
    OutlookSubAccount = apps.get_model('core', 'OutlookSubAccount')
    
    # Delete all self sub-accounts
    GoogleSubAccount.objects.filter(relationship='self').delete()
    OutlookSubAccount.objects.filter(relationship='self').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_add_google_outlook_subaccounts'),
    ]

    operations = [
        migrations.RunPython(create_self_subaccounts, reverse_self_subaccounts),
    ]
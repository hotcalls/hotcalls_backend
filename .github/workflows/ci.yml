name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'terraform/**'
      - 'k8s/**'
      - '*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'terraform/**'
      - 'k8s/**'
      - '*.md'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hotcalls_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-test.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_NAME=hotcalls_test" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "ENVIRONMENT=testing" >> .env
    
    - name: Run database migrations
      run: |
        python manage.py migrate --settings=hotcalls.settings.testing
    
    - name: Run tests with coverage
      run: |
        pytest --cov=core --cov-report=xml --cov-report=html --cov-fail-under=80
      env:
        DJANGO_SETTINGS_MODULE: hotcalls.settings.testing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements-dev.txt
    
    - name: Run black formatting check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
    
    - name: Run flake8 linting
      run: flake8 .
    
    - name: Run bandit security linting
      run: bandit -r core/ hotcalls/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: false
        tags: hotcalls-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/hotcalls-image.tar
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/hotcalls-image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker image
      run: |
        docker load --input /tmp/hotcalls-image.tar
        docker run --rm --name test-container -d -p 8000:8000 \
          -e SECRET_KEY=test-key \
          -e DEBUG=False \
          -e ALLOWED_HOSTS=localhost \
          -e DB_HOST=localhost \
          hotcalls-backend:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health/ || exit 1
        
        # Cleanup
        docker stop test-container

  generate-schema:
    name: Generate OpenAPI Schema
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hotcalls_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
    
    - name: Set up environment
      run: |
        cp .env.example .env
        echo "DEBUG=False" >> .env
        echo "SECRET_KEY=schema-generation-key" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_NAME=hotcalls_test" >> .env
        echo "ENVIRONMENT=testing" >> .env
    
    - name: Run migrations
      run: python manage.py migrate --settings=hotcalls.settings.testing
    
    - name: Generate OpenAPI schema
      run: |
        python manage.py spectacular --color --file openapi.yaml --settings=hotcalls.settings.testing
    
    - name: Upload OpenAPI schema
      uses: actions/upload-artifact@v3
      with:
        name: openapi-schema
        path: openapi.yaml
        retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/django
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }} 
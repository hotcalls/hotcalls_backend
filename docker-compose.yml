version: '3.8'

services:
  db:
    image: postgres:15-alpine
    env_file: .env
    environment:
      # Map our .env variables to what PostgreSQL expects
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    env_file: .env
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      target: development
    env_file: .env
    environment:
      # Django settings configuration
      - DJANGO_SETTINGS_MODULE=hotcalls.settings.development
      - ENVIRONMENT=development
      # Override for Docker networking
      - DB_HOST=db
      - REDIS_HOST=redis
      # Stripe webhook signing secret (local development)
      - STRIPE_WEBHOOK_SECRET=whsec_3bd921fa722e74a1c71e01390b170a6ad5cd83c9b6521505ac6bb77f79465f9b
    ports:
      - "8000:8000"
    volumes:
      - .:/app:delegated
      - static_volume:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
  frontend:
    image: node:18-bullseye
    working_dir: /app/frontend
    env_file: .env
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=5173
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app/frontend:delegated
      - /app/frontend/node_modules
    command: bash -lc "npm install && npm run dev -- --host 0.0.0.0"

  mcp:
    image: python:3.12-slim
    working_dir: /app/booking-mcp
    env_file: .env
    environment:
      - CALENDAR_API_URL=http://backend:8000
      - PYTHONUNBUFFERED=1
    ports:
      - "8001:8000"
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./booking-mcp:/app/booking-mcp:delegated
    command: bash -lc "pip install -e . || true; pip install watchfiles && python -m watchfiles 'python server.py'"

  outboundagent:
    image: python:3.11-slim
    working_dir: /app/outboundagent
    env_file: .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - MCP_SERVER_URL=http://mcp:8000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./outboundagent:/app/outboundagent:delegated
    command: bash -lc "pip install -r requirements.txt && pip install watchfiles && python -m watchfiles 'python agent.py start'"

  celery:
    build:
      context: .
      target: development
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=hotcalls.settings.development
      - ENVIRONMENT=development
      - DB_HOST=db
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app:delegated
    command: >
      bash -lc "celery -A hotcalls worker -l info -Q celery"

  celery-beat:
    build:
      context: .
      target: development
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=hotcalls.settings.development
      - ENVIRONMENT=development
      - DB_HOST=db
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app:delegated
    command: >
      bash -lc "celery -A hotcalls beat -l info"


volumes:
  postgres_data:
  redis_data:
  static_volume: 
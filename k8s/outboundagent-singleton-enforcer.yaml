apiVersion: batch/v1
kind: CronJob
metadata:
  name: ${PROJECT_PREFIX}-outboundagent-singleton-enforcer
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
spec:
  schedule: "*/2 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: ${PROJECT_PREFIX}-sa
          restartPolicy: Never
          containers:
          - name: enforcer
            image: bitnami/kubectl:1.32
            command:
            - /bin/sh
            - -c
            - |
              set -eu
              ns="${PROJECT_PREFIX}-${ENVIRONMENT}"
              selector="app.kubernetes.io/name=${PROJECT_PREFIX},app.kubernetes.io/component=outboundagent"
              list=$(kubectl -n "$ns" get pods -l "$selector" --sort-by=.metadata.creationTimestamp \
                -o jsonpath='{range .items[*]}{.metadata.name} {.status.phase}{"\n"}{end}')
              # Determine the newest non-terminal pod to keep
              keep=$(echo "$list" | awk '$2!="Succeeded" && $2!="Failed" {print $1}' | tail -n 1 || true)
              [ -z "$keep" ] && { echo "No active outboundagent pods found."; exit 0; }
              echo "Keeping newest pod: $keep"
              echo "$list" | while read -r name phase; do
                [ -z "$name" ] && continue
                case "$phase" in Succeeded|Failed) continue;; esac
                if [ "$name" != "$keep" ]; then
                  echo "Deleting extra pod: $name"
                  kubectl -n "$ns" delete pod "$name" --grace-period=10 --timeout=30s --ignore-not-found || true
                fi
              done
            resources:
              requests:
                cpu: 5m
                memory: 16Mi
              limits:
                cpu: 50m
                memory: 64Mi



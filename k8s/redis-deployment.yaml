# Dynamic Redis Deployment Template
# Usage: envsubst < redis-deployment.yaml | kubectl apply -f -
# Set variables: PROJECT_PREFIX, ENVIRONMENT

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: ${PROJECT_PREFIX}
    environment: ${ENVIRONMENT}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: ${PROJECT_PREFIX}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # Redis user
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        args:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 256mb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${PROJECT_PREFIX}-secrets
              key: REDIS_PASSWORD
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        
        # Resource limits
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
      
      # Volumes
      volumes:
      - name: redis-data
        emptyDir: {}
      - name: tmp
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: ${PROJECT_PREFIX}
    environment: ${ENVIRONMENT}
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache 
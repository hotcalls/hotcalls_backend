# Celery Worker Deployment
# Usage: envsubst < celery-worker-deployment.yaml | kubectl apply -f -

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${PROJECT_PREFIX}-celery-worker
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: ${PROJECT_PREFIX}
    app.kubernetes.io/component: celery-worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: ${CELERY_WORKER_REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: ${PROJECT_PREFIX}
      app.kubernetes.io/component: celery-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${PROJECT_PREFIX}
        app.kubernetes.io/component: celery-worker
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: ${PROJECT_PREFIX}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-worker
        image: ${ACR_LOGIN_SERVER}/${PROJECT_PREFIX}-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        command: ["sh", "-c", "celery -A hotcalls worker -l info --concurrency=2"]
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: ${PROJECT_PREFIX}-config
        - secretRef:
            name: ${PROJECT_PREFIX}-secrets
        
        # Health checks for Celery worker
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - celery -A hotcalls inspect ping || exit 1
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        # Resource requests and limits
        resources:
          requests:
            memory: "${CELERY_MEMORY_REQUEST}"
            cpu: "${CELERY_CPU_REQUEST}"
          limits:
            memory: "${CELERY_MEMORY_LIMIT}"
            cpu: "${CELERY_CPU_LIMIT}"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
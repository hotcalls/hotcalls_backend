# Dynamic Deployment Template
# Usage: envsubst < deployment.yaml | kubectl apply -f -
# Set variables: ENVIRONMENT, REPLICAS, IMAGE_TAG

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${PROJECT_PREFIX}-backend
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: ${PROJECT_PREFIX}
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
    environment: ${ENVIRONMENT}
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: ${PROJECT_PREFIX}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${PROJECT_PREFIX}
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ${PROJECT_PREFIX}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: ${ACR_LOGIN_SERVER}/${PROJECT_PREFIX}-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: ${PROJECT_PREFIX}-config
        - secretRef:
            name: ${PROJECT_PREFIX}-secrets
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health/
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health/
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 20
        
        # Resource requests and limits
        resources:
          requests:
            memory: "${RESOURCES_REQUESTS_MEMORY}"
            cpu: "${RESOURCES_REQUESTS_CPU}"
          limits:
            memory: "${RESOURCES_LIMITS_MEMORY}"
            cpu: "${RESOURCES_LIMITS_CPU}"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
      
      # Node affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - ${PROJECT_PREFIX}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${PROJECT_PREFIX}-celery-worker
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: ${PROJECT_PREFIX}
    app.kubernetes.io/component: celery-worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: ${PROJECT_PREFIX}
      app.kubernetes.io/component: celery-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${PROJECT_PREFIX}
        app.kubernetes.io/component: celery-worker
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: ${PROJECT_PREFIX}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-worker
        image: ${ACR_LOGIN_SERVER}/${PROJECT_PREFIX}-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        command: ["celery", "-A", "${PROJECT_PREFIX}", "worker", "-l", "info", "--concurrency=2"]
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: ${PROJECT_PREFIX}-config
        - secretRef:
            name: ${PROJECT_PREFIX}-secrets
        
        # Health checks for Celery worker
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - ${PROJECT_PREFIX}
            - inspect
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        # Resource requests and limits
        resources:
          requests:
            memory: "${CELERY_RESOURCES_REQUESTS_MEMORY}"
            cpu: "${CELERY_RESOURCES_REQUESTS_CPU}"
          limits:
            memory: "${CELERY_RESOURCES_LIMITS_MEMORY}"
            cpu: "${CELERY_RESOURCES_LIMITS_CPU}"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${PROJECT_PREFIX}-celery-beat
  namespace: ${PROJECT_PREFIX}-${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: ${PROJECT_PREFIX}
    app.kubernetes.io/component: celery-beat
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1  # Always 1 for celery-beat (scheduler)
  strategy:
    type: Recreate  # Only one beat instance should run
  selector:
    matchLabels:
      app.kubernetes.io/name: ${PROJECT_PREFIX}
      app.kubernetes.io/component: celery-beat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${PROJECT_PREFIX}
        app.kubernetes.io/component: celery-beat
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: ${PROJECT_PREFIX}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-beat
        image: ${ACR_LOGIN_SERVER}/${PROJECT_PREFIX}-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        command: ["celery", "-A", "${PROJECT_PREFIX}", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: ${PROJECT_PREFIX}-config
        - secretRef:
            name: ${PROJECT_PREFIX}-secrets
        
        # Resource requests and limits
        resources:
          requests:
            memory: "${BEAT_RESOURCES_REQUESTS_MEMORY}"
            cpu: "${BEAT_RESOURCES_REQUESTS_CPU}"
          limits:
            memory: "${BEAT_RESOURCES_LIMITS_MEMORY}"
            cpu: "${BEAT_RESOURCES_LIMITS_CPU}"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
        - name: celery-beat-schedule
          mountPath: /app/celerybeat-schedule
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
      - name: celery-beat-schedule
        emptyDir: {} 
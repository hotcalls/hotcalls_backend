apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotcalls-backend
  namespace: hotcalls-production
  labels:
    app.kubernetes.io/name: hotcalls
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: hotcalls
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hotcalls
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hotcalls-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: # REPLACE_WITH_ACR_LOGIN_SERVER/hotcalls-backend:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: hotcalls-config
        - secretRef:
            name: hotcalls-secrets
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health/
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready/
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /startup/
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 20
        
        # Resource requests and limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
      
      # Node affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - hotcalls
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotcalls-celery-worker
  namespace: hotcalls-production
  labels:
    app.kubernetes.io/name: hotcalls
    app.kubernetes.io/component: celery-worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: hotcalls
      app.kubernetes.io/component: celery-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hotcalls
        app.kubernetes.io/component: celery-worker
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: hotcalls-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-worker
        image: # REPLACE_WITH_ACR_LOGIN_SERVER/hotcalls-backend:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "hotcalls", "worker", "-l", "info", "--concurrency=2"]
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: hotcalls-config
        - secretRef:
            name: hotcalls-secrets
        
        # Health checks for Celery worker
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - hotcalls
            - inspect
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        # Resource requests and limits
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotcalls-celery-beat
  namespace: hotcalls-production
  labels:
    app.kubernetes.io/name: hotcalls
    app.kubernetes.io/component: celery-beat
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Only one beat instance should run
  selector:
    matchLabels:
      app.kubernetes.io/name: hotcalls
      app.kubernetes.io/component: celery-beat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hotcalls
        app.kubernetes.io/component: celery-beat
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: hotcalls-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-beat
        image: # REPLACE_WITH_ACR_LOGIN_SERVER/hotcalls-backend:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "hotcalls", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: hotcalls-config
        - secretRef:
            name: hotcalls-secrets
        
        # Resource requests and limits
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
        - name: celery-beat-schedule
          mountPath: /app/celerybeat-schedule
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
      - name: celery-beat-schedule
        emptyDir: {} 